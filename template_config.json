{
  "templates": {
    "react-typescript": {
      "name": "React TypeScript",
      "description": "A modern React TypeScript project setup with best practices",
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "typescript": "^5.1.6",
        "react-router-dom": "^6.15.0",
        "@tanstack/react-query": "^5.8.4",
        "axios": "^1.6.2",
        "zod": "^3.22.4",
        "jotai": "^2.5.1",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0"
      },
      "devDependencies": {
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "vite": "^5.0.0",
        "@vitejs/plugin-react": "^4.2.0",
        "eslint": "^8.53.0",
        "prettier": "^3.1.0",
        "vitest": "^0.34.6",
        "@testing-library/react": "^14.1.2",
        "@testing-library/jest-dom": "^6.1.4",
        "tailwindcss": "^3.3.5",
        "postcss": "^8.4.31",
        "autoprefixer": "^10.4.16",
        "@typescript-eslint/eslint-plugin": "^6.11.0",
        "@typescript-eslint/parser": "^6.11.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "msw": "^2.0.8"
      },
      "scripts": {
        "start": "vite",
        "build": "tsc && vite build",
        "test": "vitest",
        "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview",
        "format": "prettier --write \"src/**/*.{ts,tsx}\""
      },
      "structure": [
        "src/components/common",
        "src/components/features",
        "src/components/layout",
        "src/hooks",
        "src/pages",
        "src/types",
        "src/utils",
        "src/lib",
        "src/assets",
        "src/styles",
        "src/context",
        "src/services",
        "src/constants",
        "src/tests/unit",
        "src/tests/integration",
        "src/tests/mocks"
      ]
    },
    "node-typescript": {
      "name": "Node.js TypeScript",
      "description": "A Node.js backend project with TypeScript",
      "dependencies": {
        "express": "^4.18.2",
        "typescript": "^5.1.6",
        "dotenv": "^16.3.1",
        "cors": "^2.8.5",
        "helmet": "^7.0.0",
        "mongoose": "^7.4.1",
        "zod": "^3.21.4",
        "winston": "^3.10.0",
        "jsonwebtoken": "^9.0.1"
      },
      "devDependencies": {
        "@types/express": "^4.17.17",
        "@types/node": "^20.4.5",
        "@types/cors": "^2.8.13",
        "@types/jsonwebtoken": "^9.0.2",
        "ts-node": "^10.9.1",
        "nodemon": "^3.0.1",
        "eslint": "^8.45.0",
        "prettier": "^3.0.0",
        "jest": "^29.6.2",
        "@types/jest": "^29.5.3",
        "supertest": "^6.3.3",
        "@types/supertest": "^2.0.12"
      },
      "scripts": {
        "start": "node dist/index.js",
        "dev": "nodemon --exec ts-node src/index.ts",
        "build": "tsc",
        "test": "jest",
        "lint": "eslint src --ext ts --report-unused-disable-directives --max-warnings 0",
        "format": "prettier --write \"src/**/*.ts\""
      },
      "structure": [
        "src/controllers",
        "src/models",
        "src/routes",
        "src/middleware",
        "src/utils",
        "src/config",
        "src/services",
        "src/types",
        "src/validation",
        "src/tests/unit",
        "src/tests/integration"
      ]
    },
    "vanilla-js": {
      "name": "Vanilla JavaScript",
      "description": "A simple vanilla JavaScript project",
      "dependencies": {},
      "devDependencies": {
        "vite": "^4.4.5",
        "eslint": "^8.45.0",
        "prettier": "^3.0.0",
        "jest": "^29.6.2"
      },
      "scripts": {
        "start": "vite",
        "build": "vite build",
        "preview": "vite preview",
        "test": "jest",
        "lint": "eslint src --ext js --report-unused-disable-directives --max-warnings 0",
        "format": "prettier --write \"src/**/*.js\""
      },
      "structure": [
        "src/js",
        "src/css",
        "src/assets",
        "src/tests"
      ]
    },
    "next-typescript": {
      "name": "Next.js TypeScript",
      "description": "A Next.js project with TypeScript and App Router",
      "dependencies": {
        "next": "^14.0.3",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "typescript": "^5.2.2",
        "axios": "^1.6.2",
        "zod": "^3.22.4",
        "@tanstack/react-query": "^5.8.4",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0",
        "jotai": "^2.5.1"
      },
      "devDependencies": {
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "eslint": "^8.53.0",
        "prettier": "^3.1.0",
        "jest": "^29.7.0",
        "@testing-library/react": "^14.1.2",
        "@testing-library/jest-dom": "^6.1.4",
        "tailwindcss": "^3.3.5",
        "postcss": "^8.4.31",
        "autoprefixer": "^10.4.16",
        "@typescript-eslint/eslint-plugin": "^6.11.0",
        "@typescript-eslint/parser": "^6.11.0",
        "eslint-config-next": "^14.0.3",
        "msw": "^2.0.8"
      },
      "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint",
        "test": "jest",
        "format": "prettier --write \"app/**/*.{ts,tsx}\""
      },
      "structure": [
        "app",
        "app/api",
        "app/components",
        "app/lib",
        "app/utils",
        "app/hooks",
        "app/types",
        "app/context",
        "app/services",
        "app/(routes)",
        "public",
        "tests",
        "tests/mocks"
      ]
    },
    "fullstack-typescript": {
      "name": "Fullstack TypeScript",
      "description": "A monorepo with React frontend and Node.js backend",
      "dependencies": {},
      "devDependencies": {
        "typescript": "^5.1.6",
        "eslint": "^8.45.0",
        "prettier": "^3.0.0",
        "concurrently": "^8.2.0"
      },
      "scripts": {
        "start": "concurrently \"npm run start:frontend\" \"npm run start:backend\"",
        "start:frontend": "cd frontend && npm run start",
        "start:backend": "cd backend && npm run dev",
        "build": "concurrently \"npm run build:frontend\" \"npm run build:backend\"",
        "build:frontend": "cd frontend && npm run build",
        "build:backend": "cd backend && npm run build",
        "test": "concurrently \"npm run test:frontend\" \"npm run test:backend\"",
        "test:frontend": "cd frontend && npm run test",
        "test:backend": "cd backend && npm run test"
      },
      "structure": [
        "frontend",
        "backend",
        "shared"
      ]
    },
    "t3-stack": {
      "name": "T3 Stack",
      "description": "A full-stack, typesafe Next.js project with tRPC, Prisma, and Tailwind",
      "dependencies": {
        "next": "^14.0.3",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "typescript": "^5.2.2",
        "@trpc/client": "^10.43.3",
        "@trpc/server": "^10.43.3",
        "@trpc/react-query": "^10.43.3",
        "@tanstack/react-query": "^5.8.4",
        "zod": "^3.22.4",
        "prisma": "^5.5.2",
        "@prisma/client": "^5.5.2",
        "superjson": "^2.2.1",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0",
        "jotai": "^2.5.1",
        "next-auth": "^4.24.5"
      },
      "devDependencies": {
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "eslint": "^8.53.0",
        "prettier": "^3.1.0",
        "tailwindcss": "^3.3.5",
        "postcss": "^8.4.31",
        "autoprefixer": "^10.4.16",
        "@typescript-eslint/eslint-plugin": "^6.11.0",
        "@typescript-eslint/parser": "^6.11.0",
        "eslint-config-next": "^14.0.3"
      },
      "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint",
        "db:push": "prisma db push",
        "db:studio": "prisma studio",
        "format": "prettier --write \"**/*.{ts,tsx,md}\""
      },
      "structure": [
        "src/app",
        "src/app/api",
        "src/app/(routes)",
        "src/components",
        "src/lib",
        "src/server",
        "src/server/api",
        "src/server/auth",
        "src/server/db",
        "src/styles",
        "src/utils",
        "prisma",
        "public"
      ]
    },
    "remix-stack": {
      "name": "Remix Stack",
      "description": "A Remix project with TypeScript, Prisma, and Tailwind",
      "dependencies": {
        "@remix-run/node": "^2.3.0",
        "@remix-run/react": "^2.3.0",
        "@remix-run/serve": "^2.3.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "typescript": "^5.2.2",
        "prisma": "^5.5.2",
        "@prisma/client": "^5.5.2",
        "zod": "^3.22.4",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0"
      },
      "devDependencies": {
        "@remix-run/dev": "^2.3.0",
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "eslint": "^8.53.0",
        "prettier": "^3.1.0",
        "tailwindcss": "^3.3.5",
        "postcss": "^8.4.31",
        "autoprefixer": "^10.4.16",
        "@typescript-eslint/eslint-plugin": "^6.11.0",
        "@typescript-eslint/parser": "^6.11.0"
      },
      "scripts": {
        "dev": "remix dev",
        "build": "remix build",
        "start": "remix-serve build",
        "typecheck": "tsc",
        "db:push": "prisma db push",
        "db:studio": "prisma studio"
      },
      "structure": [
        "app/routes",
        "app/components",
        "app/models",
        "app/services",
        "app/styles",
        "app/utils",
        "app/lib",
        "prisma",
        "public"
      ]
    }
  },
  "documentTemplates": {
    "project_plan": {
      "filename": "project_plan.md",
      "sections": [
        "# Project Plan",
        "## Project Overview",
        "## Goals and Objectives",
        "## Timeline",
        "## Resources",
        "## Milestones",
        "## Risk Assessment"
      ]
    },
    "requirements": {
      "filename": "requirements.md",
      "sections": [
        "# Requirements Document",
        "## Functional Requirements",
        "## Non-Functional Requirements",
        "## Constraints",
        "## User Stories",
        "## Acceptance Criteria"
      ]
    },
    "architecture": {
      "filename": "architecture.md",
      "sections": [
        "# Architecture Document",
        "## System Overview",
        "## Components",
        "## Data Model",
        "## Technology Stack",
        "## API Design",
        "## Security Considerations",
        "## Deployment Strategy"
      ]
    },
    "ai_guidance": {
      "filename": "ai_guidance.md",
      "sections": [
        "# AI Guidance Document",
        "## Project Context",
        "## Development Standards",
        "## Code Organization",
        "## Common Tasks",
        "## Troubleshooting",
        "## AI Prompting Examples"
      ]
    },
    "cursor_guidance": {
      "filename": "cursor_guidance.md",
      "sections": [
        "# Cursor AI Assistant Guide",
        "## Project Structure",
        "## Coding Standards",
        "## Component Creation Guidelines",
        "## Testing Approach",
        "## Common Development Tasks",
        "## Recommended Extensions",
        "## Troubleshooting Tips"
      ]
    }
  }
} 